events {
    worker_connections  64;
}

error_log /sensor-observation-service/logs/debug.log debug;

http {

#
# General HTTP server set up
#

	lua_package_path '/sensor-observation-service/lua/?.lua;;';

	server{
	#
	# Set the filenames for the upstream data files
	#
		add_header X-Clacks-Overhead "GNU Terry Pratchett";
		
		location / {
			root /nginx-sensor-observation-service/html;
			
	#
	# All SERVICE requests should be for SOS
	#
			if ($arg_SERVICE = SOS){
				rewrite ^ /service/SOS?ACCEPTVERSIONS=$arg_ACCEPTVERSIONS&OFFERING=$arg_OFFERING&REQUEST=$arg_REQUEST;
			}
		}
		
		location /service/SOS {
			if ($arg_ACCEPTVERSIONS = 1.0.0){
				rewrite ^ /service/SOS/acceptversions/v1d0d0?REQUEST=$arg_REQUEST&OFFERING=$arg_OFFERING;
			}
		}
		
		location /service/SOS/acceptversions/v1d0d0 {
			if ($arg_REQUEST = GetCapabilities){
				rewrite ^ /service/SOS/acceptversions/v1d0d0/request/getcapabilities;
			}
			if ($arg_REQUEST = GetObservation){
				rewrite ^ /service/SOS/acceptversions/v1d0d0/request/getobservation/offering/$arg_OFFERING;
			}
		}

		location /service/SOS/acceptversions/v1d0d0/request/getcapabilities {
			add_header Content-Type text/xml;
		    alias /nginx-sensor-observation-service/xml/capabilities.xml;
		}
	#
	#	The following location directives deal with processing specific 
	#	GetObservation requests
	#	
		location /service/SOS/acceptversions/v1d0d0/request/getobservation/offering/CTD {
			add_header Content-Type text/json;
			content_by_lua "
				local capture = require('capture')
				local om_member_measurement = require('om_member_measurement')
				local JSON = require('JSON')
				local curled = capture.capture('curl http://spiddal.marine.ie/data/spiddal-ctd.json', true)
				local decodedCTD = JSON:decode(curled)
				local omCTD = {}
				omCTD['id'] = 'http://data.marine.ie/ctd/Idronaut/3137/' .. string.gsub(decodedCTD['Timestamp'],'[^0-9]','')
				omCTD['foi'] = {}
				omCTD['foi']['href'] = 'http://example.marine.ie/feature/galwayBayCableObservatory'
				omCTD['phenomenonTime'] = {}
				omCTD['phenomenonTime']['instant'] = decodedCTD['Timestamp']
				
				local localTemperCTD = {}
				localTemperCTD = om_member_measurement.om_member_measurement('Temp',decodedCTD['Temp'],'http://vocab.nerc.ac.uk/collection/P06/current/UPAA/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0861/','http://vocab.nerc.ac.uk/collection/P01/current/TEMPPR01/', decodedCTD['Timestamp'])

				local localSalCTD = {}
				localSalCTD = om_member_measurement.om_member_measurement('Sal',decodedCTD['Sal'],'http://vocab.nerc.ac.uk/collection/P06/current/UUUU/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0861/','http://vocab.nerc.ac.uk/collection/P01/current/PSALCU01/', decodedCTD['Timestamp'])
	
				local localPressCTD = {}
				localPressCTD = om_member_measurement.om_member_measurement('Press',decodedCTD['Press'],'http://vocab.nerc.ac.uk/collection/P06/current/UPDB/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0861/','http://vocab.nerc.ac.uk/collection/P07/current/CFSN0330/', decodedCTD['Timestamp'])
				
				local localSoundvCTD = {}
				localSoundvCTD = om_member_measurement.om_member_measurement('SoundV',decodedCTD['SoundV'],'http://vocab.nerc.ac.uk/collection/P06/current/UVAA/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0861/','http://vocab.nerc.ac.uk/collection/P01/current/SVELCV01/', decodedCTD['Timestamp'])
				
				local localCondCTD = {}
				localCondCTD = om_member_measurement.om_member_measurement('Press',decodedCTD['Cond'],'http://vocab.nerc.ac.uk/collection/P06/current/UECA/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0861/','http://vocab.nerc.ac.uk/collection/P01/current/CNDCST01/', decodedCTD['Timestamp'])
				
				omCTD['member'] = {localTemperCTD, localSalCTD, localPressCTD, localSoundvCTD, localCondCTD} 
				
				ngx.print(JSON:encode_pretty(omCTD))

			";
		}
		
		location /service/SOS/acceptversions/v1d0d0/request/getobservation/offering/FLUOROMETER {
			add_header Content-Type text/json;
			content_by_lua "
				local capture = require('capture')
				local om_member_measurement = require('om_member_measurement')
				local JSON = require('JSON')
				local curled = capture.capture('curl http://spiddal.marine.ie/data/spiddal-fluorometer.json', true)
				
				local decodedFluoro = JSON:decode(curled)
				local omFluoro = {}
				omFluoro['id'] = 'http://data.marine.ie/fluorometer/WetLabs-ECO-FLNTU/3137' .. decodedFluoro['Timestamp']
				omFluoro['foi'] = {}
				omFluoro['foi']['href'] = 'http://example.marine.ie/feature/galwayBayCableObservatory'
				omFluoro['phenomenonTime'] = {}
				omFluoro['phenomenonTime']['instant'] = decodedFluoro['Timestamp']
				
				local localChlCountFluoro = {}
				localChlCountFluoro = om_member_measurement.om_member_measurement('CHLCount',decodedFluoro['CHLCount'],'http://vocab.nerc.ac.uk/collection/P06/current/UUUU/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0215/','http://vocab.nerc.ac.uk/collection/P01/current/FCNTRW01/',decodedFluoro['Timestamp'])
				
				local localTurbCountFluoro = {}
				localTurbCountFluoro = om_member_measurement.om_member_measurement('TurbCount',decodedFluoro['NTUCount'],'http://vocab.nerc.ac.uk/collection/P06/current/UUUU/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0215/','http://vocab.nerc.ac.uk/collection/P01/current/NVLTOBS1/',decodedFluoro['Timestamp'])
				
				local localChlFluoro = {}
				localChlFluoro = om_member_measurement.om_member_measurement('CHLConcentration',decodedFluoro['CHLCount'],'http://vocab.nerc.ac.uk/collection/P06/current/UGPL/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0215/','http://vocab.nerc.ac.uk/collection/P01/current/CPHLPR01/',decodedFluoro['Timestamp'])
				
				local localTurbFluoro = {}
				localTurbFluoro = om_member_measurement.om_member_measurement('Turbidity',decodedFluoro['CHLCount'],'http://vocab.nerc.ac.uk/collection/P06/current/USTU/','http://vocab.nerc.ac.uk/collection/L22/current/TOOL0215/','http://vocab.nerc.ac.uk/collection/P01/current/TURBXXXX/',decodedFluoro['Timestamp'])
				
				omFluoro['member'] = {localChlCountFluoro,localTurbCountFluoro,localChlFluoro,localTurbFluoro} 
				
				ngx.print(JSON:encode_pretty(omFluoro))
			";
		}
	}
}